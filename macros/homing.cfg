[homing_override]
axes: xyz
# set_position_z: 10
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    {% if home_all or 'X' in params %}
      _HOME_X
    {% endif %}
  
    {% if home_all or 'Y' in params %}
      _HOME_Y
    {% endif %}
  
    {% if home_all or 'Z' in params %}
      _HOME_Z DEBUG={debug_enabled}
    {% endif %}


[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.6 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.6 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set default_x = 79 %}
    {% set default_y = 79 %}
    {% set fuzz_amount = 3 %}
    {% set debug_enabled = params.DEBUG|default(0)|int %}

    {% set fuzz_range = range((fuzz_amount * -100) | int, (fuzz_amount * 100) | int + 1) %}
    {% set adjusted_x = 79 - (fuzz_range | random / 100.0) %}                                                   # Adapt x_min to margin and fuzz constraints
    {% set adjusted_y = 79 - (fuzz_range | random / 100.0) %} 

    {% if debug_enabled %}
    { action_respond_info("Adjusted probe position: {},{}.".format(                                                                  
      (adjusted_x),                                                                                                             
      (adjusted_y),                                                                                                             
    )) }
    {% endif %}

    G90
    G0 X{adjusted_x} Y{adjusted_y} F6000
    G28 Z
    G1 Z10